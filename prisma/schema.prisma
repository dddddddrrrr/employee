// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
}

enum Role {
    EMPLOYEE
    BOSS
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    employees     Employee[]
    role          Role       @default(EMPLOYEE)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Employee {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String    @unique
    firstName   String
    lastName    String
    gender      Gender
    dateOfBirth DateTime?
    position    String
    department  String
    dateOfHire  DateTime
    salary      Float
    bonus       Float?    @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String
}

model Company {
    id        String     @id @default(cuid())
    name      String
    employees Employee[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

enum Gender {
    MALE
    FEMALE
    OTHER
}
